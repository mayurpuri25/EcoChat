{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayur\\\\OneDrive\\\\Desktop\\\\WEB PROJECT\\\\Major Project\\\\frontend\\\\src\\\\components\\\\EcoBotChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport BotInput from \"./BotInput\";\nimport BotMessage from \"./BotMessage\";\nimport { useSelector } from \"react-redux\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EcoBotChat = () => {\n  _s();\n  const groupID = useSelector(state => state.groupID);\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  useEffect(() => {\n    const run = async () => {\n      // Access your API key here directly\n      const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\n      const genAI = new GoogleGenerativeAI(API_KEY);\n\n      // For text-only input, use the gemini-pro model\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n\n      //   let initialChatHistory = [\n      //     {\n      //       role: \"user\",\n      //       parts: [{ text: \"Hello, I have 2 dogs in my house.\" }],\n      //     },\n      //     {\n      //       role: \"model\",\n      //       parts: [{ text: \"Great to meet you. What would you like to know?\" }],\n      //     },\n      //   ];\n\n      //   setChatHistory(initialChatHistory);\n\n      const chat = model.startChat({\n        history: [],\n        generationConfig: {\n          maxOutputTokens: 100\n        }\n      });\n      const msg = \"How many paws are in my house?\";\n      const result = await chat.sendMessage(msg);\n      const response = await result.response;\n      const text = await response.text();\n      const history = await chat.getHistory();\n      console.log(text);\n      console.log(\"HISTORY\", history);\n    };\n    run();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"EcoBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatIcons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: \"Start the conversation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this) : chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(BotMessage, {\n        message: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(EcoBotChat, \"9LRdTwPa1egMYmExrsYqn4XmDcc=\", false, function () {\n  return [useSelector];\n});\n_c = EcoBotChat;\nexport default EcoBotChat;\nvar _c;\n$RefreshReg$(_c, \"EcoBotChat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","BotInput","BotMessage","useSelector","GoogleGenerativeAI","jsxDEV","_jsxDEV","EcoBotChat","_s","groupID","state","messages","setMessages","messagesEndRef","chatHistory","setChatHistory","run","API_KEY","genAI","model","getGenerativeModel","chat","startChat","history","generationConfig","maxOutputTokens","msg","result","sendMessage","response","text","getHistory","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","index","ref","_c","$RefreshReg$"],"sources":["C:/Users/mayur/OneDrive/Desktop/WEB PROJECT/Major Project/frontend/src/components/EcoBotChat.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport BotInput from \"./BotInput\";\r\nimport BotMessage from \"./BotMessage\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nconst EcoBotChat = () => {\r\n    const groupID = useSelector((state) => state.groupID);\r\n    const [messages, setMessages] = useState([]);\r\n    const messagesEndRef = useRef(null);\r\n    const [chatHistory, setChatHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const run = async () => {\r\n      // Access your API key here directly\r\n      const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\r\n      const genAI = new GoogleGenerativeAI(API_KEY);\r\n\r\n      // For text-only input, use the gemini-pro model\r\n      const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n      //   let initialChatHistory = [\r\n      //     {\r\n      //       role: \"user\",\r\n      //       parts: [{ text: \"Hello, I have 2 dogs in my house.\" }],\r\n      //     },\r\n      //     {\r\n      //       role: \"model\",\r\n      //       parts: [{ text: \"Great to meet you. What would you like to know?\" }],\r\n      //     },\r\n      //   ];\r\n\r\n      //   setChatHistory(initialChatHistory);\r\n\r\n      const chat = model.startChat({\r\n        history: [],\r\n        generationConfig: {\r\n          maxOutputTokens: 100,\r\n        },\r\n      });\r\n\r\n      const msg = \"How many paws are in my house?\";\r\n\r\n      const result = await chat.sendMessage(msg);\r\n      const response = await result.response;\r\n      const text = await response.text();\r\n      const history = await chat.getHistory();\r\n      console.log(text);\r\n      console.log(\"HISTORY\", history);\r\n    };\r\n\r\n    run();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chatInfo\">\r\n        <span>EcoBot</span>\r\n        <div className=\"chatIcons\">\r\n          {/* <img src={Cam} alt=\"\" />\r\n          <img src={Add} alt=\"\" />\r\n          <img src={More} alt=\"\" /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"messages\">\r\n        {chatHistory.length === 0 ? (\r\n          <div className=\"no-messages\">Start the conversation!</div>\r\n        ) : (\r\n          chatHistory.map((message, index) => (\r\n            <BotMessage key={index} message={message} />\r\n          ))\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <BotInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EcoBotChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}