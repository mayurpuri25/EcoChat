{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayur\\\\OneDrive\\\\Desktop\\\\WEB PROJECT\\\\Major Project\\\\frontend\\\\src\\\\components\\\\Input.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button } from \"primereact/button\";\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Input = () => {\n  _s();\n  const [text, setText] = useState(\"\");\n  const groupID = useSelector(state => state.groupID);\n  const handleSend = async () => {\n    const timestamp = new Date().toLocaleString('en-US', {\n      timeZone: 'Asia/Kolkata'\n    }).replace(/,/g, ''); // Get current timestamp in ISO format\n    const senderID = localStorage.getItem('sessionID'); // sender ID\n    console.log(timestamp);\n    if (!text.trim()) {\n      alert(\"Please enter a message\");\n      return;\n    }\n    try {\n      const response = await fetch('http://127.0.0.1:5000/send_text', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text: text,\n          timestamp: timestamp,\n          senderID: senderID,\n          groupID: groupID\n        })\n      });\n      const data = await response.json();\n      if (data.success) console.log(data); // Handle response from the backend as needed\n      else console.error(\"ERROR:\", data.message); // Log response from the backend\n      setText(\"\"); // Clear input field after sending\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type something...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"pi pi-image\",\n          style: {\n            fontSize: '1.5rem',\n            color: '#708090'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSend,\n        label: \"Send\",\n        icon: \"pi pi-send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(Input, \"iR7ph9hSukEdaK+0jRorhm1whDA=\", false, function () {\n  return [useSelector];\n});\n_c = Input;\nexport default Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","useState","Button","useSelector","jsxDEV","_jsxDEV","Input","_s","text","setText","groupID","state","handleSend","timestamp","Date","toLocaleString","timeZone","replace","senderID","localStorage","getItem","console","log","trim","alert","response","fetch","method","headers","body","JSON","stringify","data","json","success","error","message","className","children","type","placeholder","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","style","fontSize","color","onClick","label","icon","_c","$RefreshReg$"],"sources":["C:/Users/mayur/OneDrive/Desktop/WEB PROJECT/Major Project/frontend/src/components/Input.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button } from \"primereact/button\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Input = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const groupID = useSelector((state) => state.groupID);\r\n\r\n  const handleSend = async () => {\r\n    const timestamp = new Date().toLocaleString('en-US', { timeZone: 'Asia/Kolkata' }).replace(/,/g, ''); // Get current timestamp in ISO format\r\n    const senderID = localStorage.getItem('sessionID'); // sender ID\r\n    console.log(timestamp)\r\n    if (!text.trim()) {\r\n      alert(\"Please enter a message\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:5000/send_text', {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          text: text,\r\n          timestamp: timestamp,\r\n          senderID: senderID,\r\n          groupID: groupID,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      if (data.success)\r\n        console.log(data); // Handle response from the backend as needed\r\n      else\r\n        console.error(\"ERROR:\",data.message); // Log response from the backend\r\n      setText(\"\"); // Clear input field after sending\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"input\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type something...\"\r\n        onChange={(e) => setText(e.target.value)}\r\n        value={text}\r\n      />\r\n      <div className=\"send\">\r\n        <label htmlFor=\"file\">\r\n            <i className=\"pi pi-image\" style={{ fontSize: '1.5rem', color: '#708090' }}></i>\r\n        </label>\r\n        <Button onClick={handleSend} label=\"Send\" icon=\"pi pi-send\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}