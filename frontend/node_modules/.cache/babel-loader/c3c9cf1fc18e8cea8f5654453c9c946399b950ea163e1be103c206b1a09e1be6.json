{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayur\\\\OneDrive\\\\Desktop\\\\WEB PROJECT\\\\Major Project\\\\frontend\\\\src\\\\components\\\\EcoBotChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport BotMessage from \"./BotMessage\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { Button } from \"primereact/button\";\nimport * as marked from 'marked';\nimport DOMPurify from 'dompurify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EcoBotChat = () => {\n  _s();\n  const messagesEndRef = useRef(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [inputText, setInputText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Function to remove HTML tags\n  function removeTags(htmlString) {\n    const regex = /<[^>]*>/g; // Regular expression to match HTML tags\n    return htmlString.replace(regex, \"\");\n  }\n\n  // API key setup\n  const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\n  const genAI = new GoogleGenerativeAI(API_KEY);\n\n  // For text-only input, use the gemini-pro model\n  const model = genAI.getGenerativeModel({\n    model: \"gemini-pro\"\n  });\n  const handleSend = async () => {\n    setLoading(true);\n    try {\n      const result = await model.generateContent(inputText);\n      const response = await result.response;\n      const text = response.text();\n      const markdownText = marked.marked(text); // Convert to Markdown\n      const msgContentInput = {\n        role: \"user\",\n        parts: [{\n          text: inputText\n        }]\n      };\n      const msgContentOutput = {\n        role: \"model\",\n        parts: [{\n          text: markdownText\n        }]\n      };\n      const contents = [...chatHistory, msgContentInput, msgContentOutput];\n      setChatHistory(contents);\n      setInputText('');\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"EcoBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatIcons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: \"Start the conversation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this) : chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(BotMessage, {\n        message: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type something...\",\n        onChange: e => setInputText(e.target.value),\n        value: inputText,\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send\",\n        children: [loading && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"pi pi-spin pi-spinner\",\n            style: {\n              fontSize: '1.5rem',\n              color: '#708090'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSend,\n          label: \"Send\",\n          icon: \"pi pi-send\",\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(EcoBotChat, \"LFZyEgxHBDPMO8eZ5uPhOb/32SI=\");\n_c = EcoBotChat;\nexport default EcoBotChat;\nvar _c;\n$RefreshReg$(_c, \"EcoBotChat\");","map":{"version":3,"names":["React","useState","useRef","BotMessage","GoogleGenerativeAI","Button","marked","DOMPurify","jsxDEV","_jsxDEV","EcoBotChat","_s","messagesEndRef","chatHistory","setChatHistory","inputText","setInputText","loading","setLoading","removeTags","htmlString","regex","replace","API_KEY","genAI","model","getGenerativeModel","handleSend","result","generateContent","response","text","markdownText","msgContentInput","role","parts","msgContentOutput","contents","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","index","ref","type","placeholder","onChange","e","target","value","disabled","style","fontSize","color","onClick","label","icon","_c","$RefreshReg$"],"sources":["C:/Users/mayur/OneDrive/Desktop/WEB PROJECT/Major Project/frontend/src/components/EcoBotChat.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport BotMessage from \"./BotMessage\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport { Button } from \"primereact/button\";\r\nimport * as marked from 'marked';  \r\nimport DOMPurify from 'dompurify';\r\n\r\n\r\nconst EcoBotChat = () => {\r\n  const messagesEndRef = useRef(null);\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Function to remove HTML tags\r\n  function removeTags(htmlString) {\r\n    const regex = /<[^>]*>/g; // Regular expression to match HTML tags\r\n    return htmlString.replace(regex, \"\");\r\n  }\r\n\r\n\r\n\r\n\r\n  // API key setup\r\n  const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\r\n  const genAI = new GoogleGenerativeAI(API_KEY);\r\n\r\n  // For text-only input, use the gemini-pro model\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n  const handleSend = async () => {\r\n    setLoading(true);\r\n    try{\r\n      const result = await model.generateContent(inputText);\r\n      const response = await result.response;\r\n      const text = response.text();\r\n      const markdownText = marked.marked(text); // Convert to Markdown\r\n      const msgContentInput = { role: \"user\", parts: [{ text: inputText }] };\r\n      const msgContentOutput = { role: \"model\", parts: [{ text: markdownText }] };\r\n      const contents = [...chatHistory, msgContentInput, msgContentOutput];\r\n      setChatHistory(contents);\r\n      setInputText('')\r\n    }catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chatInfo\">\r\n        <span>EcoBot</span>\r\n        <div className=\"chatIcons\">\r\n          {/* <img src={Cam} alt=\"\" />\r\n          <img src={Add} alt=\"\" />\r\n          <img src={More} alt=\"\" /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"messages\">\r\n        {chatHistory.length === 0 ? (\r\n          <div className=\"no-messages\">Start the conversation!</div>\r\n        ) : (\r\n          chatHistory.map((message, index) => (\r\n            <BotMessage key={index} message={message} />\r\n          ))\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type something...\"\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          value={inputText}\r\n          disabled={loading}\r\n        />\r\n        <div className=\"send\">\r\n          {loading && <span><i className=\"pi pi-spin pi-spinner\" style={{ fontSize: '1.5rem',  color: '#708090' }}></i></span>}\r\n          <Button onClick={handleSend}\r\n           label=\"Send\" \r\n           icon=\"pi pi-send\" disabled={loading}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EcoBotChat;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,kBAAkB,QAAQ,uBAAuB;AAC1D,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAChC,OAAOC,SAAS,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,cAAc,GAAGV,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,SAASkB,UAAUA,CAACC,UAAU,EAAE;IAC9B,MAAMC,KAAK,GAAG,UAAU,CAAC,CAAC;IAC1B,OAAOD,UAAU,CAACE,OAAO,CAACD,KAAK,EAAE,EAAE,CAAC;EACtC;;EAKA;EACA,MAAME,OAAO,GAAG,yCAAyC;EACzD,MAAMC,KAAK,GAAG,IAAIpB,kBAAkB,CAACmB,OAAO,CAAC;;EAE7C;EACA,MAAME,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;IAAED,KAAK,EAAE;EAAa,CAAC,CAAC;EAE/D,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7BT,UAAU,CAAC,IAAI,CAAC;IAChB,IAAG;MACD,MAAMU,MAAM,GAAG,MAAMH,KAAK,CAACI,eAAe,CAACd,SAAS,CAAC;MACrD,MAAMe,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;MACtC,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC5B,MAAMC,YAAY,GAAG1B,MAAM,CAACA,MAAM,CAACyB,IAAI,CAAC,CAAC,CAAC;MAC1C,MAAME,eAAe,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEC,KAAK,EAAE,CAAC;UAAEJ,IAAI,EAAEhB;QAAU,CAAC;MAAE,CAAC;MACtE,MAAMqB,gBAAgB,GAAG;QAAEF,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAE,CAAC;UAAEJ,IAAI,EAAEC;QAAa,CAAC;MAAE,CAAC;MAC3E,MAAMK,QAAQ,GAAG,CAAC,GAAGxB,WAAW,EAAEoB,eAAe,EAAEG,gBAAgB,CAAC;MACpEtB,cAAc,CAACuB,QAAQ,CAAC;MACxBrB,YAAY,CAAC,EAAE,CAAC;IAClB,CAAC,QAAOsB,KAAK,EAAE;MACbC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,SAAS;MACRpB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACET,OAAA;IAAK+B,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBhC,OAAA;MAAK+B,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvBhC,OAAA;QAAAgC,QAAA,EAAM;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACnBpC,OAAA;QAAK+B,SAAS,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIrB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENpC,OAAA;MAAK+B,SAAS,EAAC,UAAU;MAAAC,QAAA,GACtB5B,WAAW,CAACiC,MAAM,KAAK,CAAC,gBACvBrC,OAAA;QAAK+B,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GAE1DhC,WAAW,CAACkC,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC7BxC,OAAA,CAACN,UAAU;QAAa6C,OAAO,EAAEA;MAAQ,GAAxBC,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqB,CAC5C,CACF,eACDpC,OAAA;QAAKyC,GAAG,EAAEtC;MAAe;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eAENpC,OAAA;MAAK+B,SAAS,EAAC,OAAO;MAAAC,QAAA,gBACpBhC,OAAA;QACE0C,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,mBAAmB;QAC/BC,QAAQ,EAAGC,CAAC,IAAKtC,YAAY,CAACsC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;QAC9CA,KAAK,EAAEzC,SAAU;QACjB0C,QAAQ,EAAExC;MAAQ;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC,eACFpC,OAAA;QAAK+B,SAAS,EAAC,MAAM;QAAAC,QAAA,GAClBxB,OAAO,iBAAIR,OAAA;UAAAgC,QAAA,eAAMhC,OAAA;YAAG+B,SAAS,EAAC,uBAAuB;YAACkB,KAAK,EAAE;cAAEC,QAAQ,EAAE,QAAQ;cAAGC,KAAK,EAAE;YAAU;UAAE;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACpHpC,OAAA,CAACJ,MAAM;UAACwD,OAAO,EAAElC,UAAW;UAC3BmC,KAAK,EAAC,MAAM;UACZC,IAAI,EAAC,YAAY;UAACN,QAAQ,EAAExC;QAAQ;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClC,EAAA,CAhFID,UAAU;AAAAsD,EAAA,GAAVtD,UAAU;AAkFhB,eAAeA,UAAU;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}