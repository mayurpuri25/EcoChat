{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayur\\\\OneDrive\\\\Desktop\\\\WEB PROJECT\\\\Major Project\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\"; // Import withRouter from react-router-dom\n// import Cam from \"../img/cam.png\";\n// import Add from \"../img/add.png\";\n// import More from \"../img/more.png\";\n// import Messages from \"./Messages\";\nimport Input from \"./Input\";\n// import { ChatContext } from \"../context/ChatContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  location\n}) => {\n  _s();\n  // Destructure location from props\n  const [groupName, setGroupName] = useState(\"\");\n  const [groupID, setGroupID] = useState(\"\");\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.search); // Use location.search to get the query parameters\n    const groupIDParam = urlParams.get(\"param\");\n    const fetchGroupChat = async () => {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/group_param\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            group_ID: groupIDParam\n          })\n        });\n        const data = await response.json();\n        console.log(data); // Check response data\n        if (data.success) {\n          setGroupName(data.name); // Set group name\n        } else {\n          console.error(data.message); // Handle error\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    if (groupIDParam) {\n      setGroupID(groupIDParam);\n      fetchGroupChat();\n    }\n  }, [location.search]); // Add location.search to the dependency array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatInfo\",\n      children: [groupName && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: groupName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 23\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatIcons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"VhIFhWey13ydFUZWErIR5W5MA1E=\");\n_c = Chat;\nexport default _c2 = withRouter(Chat); // Wrap the component with withRouter HOC\nvar _c, _c2;\n$RefreshReg$(_c, \"Chat\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","withRouter","Input","jsxDEV","_jsxDEV","Chat","location","_s","groupName","setGroupName","groupID","setGroupID","urlParams","URLSearchParams","search","groupIDParam","get","fetchGroupChat","response","fetch","method","headers","body","JSON","stringify","group_ID","data","json","console","log","success","name","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","$RefreshReg$"],"sources":["C:/Users/mayur/OneDrive/Desktop/WEB PROJECT/Major Project/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\"; // Import withRouter from react-router-dom\r\n// import Cam from \"../img/cam.png\";\r\n// import Add from \"../img/add.png\";\r\n// import More from \"../img/more.png\";\r\n// import Messages from \"./Messages\";\r\nimport Input from \"./Input\";\r\n// import { ChatContext } from \"../context/ChatContext\";\r\n\r\nconst Chat = ({ location }) => { // Destructure location from props\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [groupID, setGroupID] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(location.search); // Use location.search to get the query parameters\r\n    const groupIDParam = urlParams.get(\"param\");\r\n\r\n    const fetchGroupChat = async () => {\r\n      try {\r\n        const response = await fetch(\"http://127.0.0.1:5000/group_param\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ group_ID: groupIDParam }),\r\n        });\r\n        const data = await response.json();\r\n        console.log(data); // Check response data\r\n        if (data.success) {\r\n          setGroupName(data.name); // Set group name\r\n        } else {\r\n          console.error(data.message); // Handle error\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    if (groupIDParam) {\r\n      setGroupID(groupIDParam);\r\n      fetchGroupChat();\r\n    }\r\n  }, [location.search]); // Add location.search to the dependency array\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chatInfo\">\r\n        {groupName && <span>{groupName}</span>} {/* Render only if groupName exists */}\r\n        <div className=\"chatIcons\">\r\n          {/* <img src={Cam} alt=\"\" />\r\n          <img src={Add} alt=\"\" />\r\n          <img src={More} alt=\"\" /> */}\r\n        </div>\r\n      </div>\r\n      {/* <Messages /> */}\r\n      <Input />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Chat); // Wrap the component with withRouter HOC\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,kBAAkB,CAAC,CAAC;AAC/C;AACA;AACA;AACA;AACA,OAAOC,KAAK,MAAM,SAAS;AAC3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAAE;EAC/B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,IAAIC,eAAe,CAACP,QAAQ,CAACQ,MAAM,CAAC,CAAC,CAAC;IACxD,MAAMC,YAAY,GAAGH,SAAS,CAACI,GAAG,CAAC,OAAO,CAAC;IAE3C,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;UAChEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,QAAQ,EAAEV;UAAa,CAAC;QACjD,CAAC,CAAC;QACF,MAAMW,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;QACnB,IAAIA,IAAI,CAACI,OAAO,EAAE;UAChBrB,YAAY,CAACiB,IAAI,CAACK,IAAI,CAAC,CAAC,CAAC;QAC3B,CAAC,MAAM;UACLH,OAAO,CAACI,KAAK,CAACN,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC;QAC/B;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,IAAIjB,YAAY,EAAE;MAChBJ,UAAU,CAACI,YAAY,CAAC;MACxBE,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACX,QAAQ,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEvB,oBACEV,OAAA;IAAK8B,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnB/B,OAAA;MAAK8B,SAAS,EAAC,UAAU;MAAAC,QAAA,GACtB3B,SAAS,iBAAIJ,OAAA;QAAA+B,QAAA,EAAO3B;MAAS;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,EAAC,GAAC,eACxCnC,OAAA;QAAK8B,SAAS,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIrB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENnC,OAAA,CAACF,KAAK;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAChC,EAAA,CAjDIF,IAAI;AAAAmC,EAAA,GAAJnC,IAAI;AAmDV,eAAAoC,GAAA,GAAexC,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC;AAAA,IAAAmC,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}