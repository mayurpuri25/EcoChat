{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayur\\\\OneDrive\\\\Desktop\\\\WEB PROJECT\\\\Major Project\\\\frontend\\\\src\\\\components\\\\EcoBotChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport BotMessage from \"./BotMessage\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { Button } from \"primereact/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EcoBotChat = () => {\n  _s();\n  const messagesEndRef = useRef(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [inputText, setInputText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // API key setup\n  const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\n  const genAI = new GoogleGenerativeAI(API_KEY);\n\n  // For text-only input, use the gemini-pro model\n  const model = genAI.getGenerativeModel({\n    model: \"gemini-pro\"\n  });\n  const handleSend = async () => {\n    setLoading(true);\n\n    // Add user input to chat history\n    const newChatHistory = [...chatHistory, {\n      role: \"user\",\n      parts: [{\n        text: inputText\n      }]\n    }];\n    try {\n      // Send user input to the model\n      const result = await model.startChat({\n        history: newChatHistory,\n        generationConfig: {\n          maxOutputTokens: 100\n        }\n      }).sendMessage(inputText);\n\n      // Get the response\n      const response = await result.response;\n      const text = await response.text();\n\n      // Update chat history with the response\n      const updatedChatHistory = [...newChatHistory, {\n        role: \"model\",\n        parts: [{\n          text: text\n        }]\n      }];\n      setChatHistory(updatedChatHistory);\n      console.log(\"HISTORY\", updatedChatHistory);\n      console.log(\"TEXT\", text);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"EcoBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatIcons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: \"Start the conversation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this) : chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(BotMessage, {\n        message: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type something...\",\n        onChange: e => setInputText(e.target.value),\n        value: inputText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSend,\n          label: \"Send\",\n          icon: \"pi pi-send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(EcoBotChat, \"LFZyEgxHBDPMO8eZ5uPhOb/32SI=\");\n_c = EcoBotChat;\nexport default EcoBotChat;\nvar _c;\n$RefreshReg$(_c, \"EcoBotChat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","BotMessage","GoogleGenerativeAI","Button","jsxDEV","_jsxDEV","EcoBotChat","_s","messagesEndRef","chatHistory","setChatHistory","inputText","setInputText","loading","setLoading","API_KEY","genAI","model","getGenerativeModel","handleSend","newChatHistory","role","parts","text","result","startChat","history","generationConfig","maxOutputTokens","sendMessage","response","updatedChatHistory","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","index","ref","type","placeholder","onChange","e","target","value","onClick","label","icon","_c","$RefreshReg$"],"sources":["C:/Users/mayur/OneDrive/Desktop/WEB PROJECT/Major Project/frontend/src/components/EcoBotChat.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport BotMessage from \"./BotMessage\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nconst EcoBotChat = () => {\r\n  const messagesEndRef = useRef(null);\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n  // API key setup\r\n  const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\r\n  const genAI = new GoogleGenerativeAI(API_KEY);\r\n\r\n  // For text-only input, use the gemini-pro model\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n  const handleSend = async () => {\r\n    setLoading(true);\r\n\r\n    // Add user input to chat history\r\n    const newChatHistory = [...chatHistory, { role: \"user\", parts: [{ text: inputText }] }];\r\n\r\n    try {\r\n      // Send user input to the model\r\n      const result = await model.startChat({\r\n        history: newChatHistory,\r\n        generationConfig: {\r\n          maxOutputTokens: 100,\r\n        },\r\n      }).sendMessage(inputText);\r\n\r\n      // Get the response\r\n      const response = await result.response;\r\n      const text = await response.text();\r\n\r\n      // Update chat history with the response\r\n      const updatedChatHistory = [\r\n        ...newChatHistory,\r\n        { role: \"model\", parts: [{ text: text }] },\r\n      ];\r\n\r\n      setChatHistory(updatedChatHistory);\r\n      console.log(\"HISTORY\", updatedChatHistory);\r\n      console.log(\"TEXT\", text);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chatInfo\">\r\n        <span>EcoBot</span>\r\n        <div className=\"chatIcons\">\r\n          {/* <img src={Cam} alt=\"\" />\r\n          <img src={Add} alt=\"\" />\r\n          <img src={More} alt=\"\" /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"messages\">\r\n        {chatHistory.length === 0 ? (\r\n          <div className=\"no-messages\">Start the conversation!</div>\r\n        ) : (\r\n          chatHistory.map((message, index) => (\r\n            <BotMessage key={index} message={message} />\r\n          ))\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type something...\"\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          value={inputText}\r\n        />\r\n        <div className=\"send\">\r\n          <Button onClick={handleSend} label=\"Send\" icon=\"pi pi-send\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EcoBotChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}