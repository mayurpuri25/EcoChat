{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayur\\\\OneDrive\\\\Desktop\\\\WEB PROJECT\\\\Major Project\\\\frontend\\\\src\\\\components\\\\EcoBotChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport BotInput from \"./BotInput\";\nimport BotMessage from \"./BotMessage\";\nimport { useSelector } from \"react-redux\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { Button } from \"primereact/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EcoBotChat = () => {\n  _s();\n  const groupID = useSelector(state => state.groupID);\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [inputText, setInputText] = useState(\"\");\n\n  // API key setup\n  const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\n  const genAI = new GoogleGenerativeAI(API_KEY);\n\n  // For text-only input, use the gemini-pro model\n  const model = genAI.getGenerativeModel({\n    model: \"gemini-pro\"\n  });\n  const handleSend = async () => {\n    const chat = model.startChat({\n      history: chatHistory,\n      generationConfig: {\n        maxOutputTokens: 100\n      }\n    });\n    const result = await chat.sendMessage(inputText);\n    if (result && result.response) {\n      const response = result.response;\n      const text = await response.text();\n      const history = await chat.getHistory();\n      setChatHistory(history);\n      console.log(\"HISTORY\", history);\n      console.log(\"TEXT\", text);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"EcoBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatIcons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: \"Start the conversation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this) : chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(BotMessage, {\n        message: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type something...\",\n        onChange: e => setInputText(e.target.value),\n        value: inputText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSend,\n          label: \"Send\",\n          icon: \"pi pi-send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(EcoBotChat, \"p9k+bqQe622hD3ujbsWy6uyjoQQ=\", false, function () {\n  return [useSelector];\n});\n_c = EcoBotChat;\nexport default EcoBotChat;\nvar _c;\n$RefreshReg$(_c, \"EcoBotChat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","BotInput","BotMessage","useSelector","GoogleGenerativeAI","Button","jsxDEV","_jsxDEV","EcoBotChat","_s","groupID","state","messages","setMessages","messagesEndRef","chatHistory","setChatHistory","inputText","setInputText","API_KEY","genAI","model","getGenerativeModel","handleSend","chat","startChat","history","generationConfig","maxOutputTokens","result","sendMessage","response","text","getHistory","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","index","ref","type","placeholder","onChange","e","target","value","onClick","label","icon","_c","$RefreshReg$"],"sources":["C:/Users/mayur/OneDrive/Desktop/WEB PROJECT/Major Project/frontend/src/components/EcoBotChat.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport BotInput from \"./BotInput\";\r\nimport BotMessage from \"./BotMessage\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nconst EcoBotChat = () => {\r\n  const groupID = useSelector((state) => state.groupID);\r\n  const [messages, setMessages] = useState([]);\r\n  const messagesEndRef = useRef(null);\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [inputText, setInputText] = useState(\"\");\r\n\r\n  // API key setup\r\n  const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\r\n  const genAI = new GoogleGenerativeAI(API_KEY);\r\n\r\n  // For text-only input, use the gemini-pro model\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n  const handleSend = async () => {\r\n    const chat = model.startChat({\r\n        history: chatHistory,\r\n        generationConfig: {\r\n          maxOutputTokens: 100,\r\n        },\r\n      });\r\n    \r\n      const result = await chat.sendMessage(inputText);\r\n      if (result && result.response) {\r\n        const response = result.response;\r\n        const text = await response.text();\r\n        const history = await chat.getHistory();\r\n        setChatHistory(history);\r\n        console.log(\"HISTORY\", history);\r\n        console.log(\"TEXT\", text);\r\n      }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chatInfo\">\r\n        <span>EcoBot</span>\r\n        <div className=\"chatIcons\">\r\n          {/* <img src={Cam} alt=\"\" />\r\n          <img src={Add} alt=\"\" />\r\n          <img src={More} alt=\"\" /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"messages\">\r\n        {chatHistory.length === 0 ? (\r\n          <div className=\"no-messages\">Start the conversation!</div>\r\n        ) : (\r\n          chatHistory.map((message, index) => (\r\n            <BotMessage key={index} message={message} />\r\n          ))\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type something...\"\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          value={inputText}\r\n        />\r\n        <div className=\"send\">\r\n          <Button onClick={handleSend} label=\"Send\" icon=\"pi pi-send\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EcoBotChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}