{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayur\\\\OneDrive\\\\Desktop\\\\WEB PROJECT\\\\Major Project\\\\frontend\\\\src\\\\components\\\\BotMessages.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Message from \"./Message\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotMessages = () => {\n  _s();\n  const groupID = useSelector(state => state.groupID);\n  const [messages, setMessages] = useState([]);\n  const [chat_history, setChatHistory] = useState([]);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    const run = async () => {\n      // Access your API key here directly\n      const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\n      const genAI = new GoogleGenerativeAI(API_KEY);\n\n      // For text-only input, use the gemini-pro model\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      let chatHistory = [{\n        role: \"user\",\n        parts: [{\n          text: \"Hello, I have 2 dogs in my house.\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Great to meet you. What would you like to know?\"\n        }]\n      }];\n      setChatHistory(chatHistory);\n      const chat = model.startChat({\n        history: chatHistory,\n        generationConfig: {\n          maxOutputTokens: 100\n        }\n      });\n      const msg = \"How many paws are in my house?\";\n      const result = await chat.sendMessage(msg);\n      const response = await result.response;\n      const text = await response.text();\n      console.log(text);\n      console.log(chatHistory);\n    };\n    run();\n  }, []);\n  useEffect(() => {\n    // Scroll to bottom after a small delay when messages are loaded\n    const timer = setTimeout(() => {\n      if (messagesEndRef.current) {\n        messagesEndRef.current.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\"\n        });\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages\",\n    children: [chatHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-messages\",\n      children: \"Start the conversation!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-messages\",\n      children: \"conversation!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n\n    // messages.map((message, index) => (\n    //   <Message key={index} message={message} />\n    // ))\n    , /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(BotMessages, \"p6HZtZaeOX8H654swwgBLLpdLiY=\", false, function () {\n  return [useSelector];\n});\n_c = BotMessages;\nexport default BotMessages;\nvar _c;\n$RefreshReg$(_c, \"BotMessages\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useSelector","Message","GoogleGenerativeAI","jsxDEV","_jsxDEV","BotMessages","_s","groupID","state","messages","setMessages","chat_history","setChatHistory","messagesEndRef","run","API_KEY","genAI","model","getGenerativeModel","chatHistory","role","parts","text","chat","startChat","history","generationConfig","maxOutputTokens","msg","result","sendMessage","response","console","log","timer","setTimeout","current","scrollIntoView","behavior","block","clearTimeout","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/mayur/OneDrive/Desktop/WEB PROJECT/Major Project/frontend/src/components/BotMessages.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Message from \"./Message\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nconst BotMessages = () => {\r\n  const groupID = useSelector((state) => state.groupID);\r\n  const [messages, setMessages] = useState([]);\r\n  const [chat_history, setChatHistory] = useState([]);\r\n  const messagesEndRef = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const run = async () => {\r\n      // Access your API key here directly\r\n      const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\r\n      const genAI = new GoogleGenerativeAI(API_KEY);\r\n\r\n      // For text-only input, use the gemini-pro model\r\n      const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n      let chatHistory = [\r\n        {\r\n          role: \"user\",\r\n          parts: [{ text: \"Hello, I have 2 dogs in my house.\" }],\r\n        },\r\n        {\r\n          role: \"model\",\r\n          parts: [{ text: \"Great to meet you. What would you like to know?\" }],\r\n        },\r\n      ];\r\n      setChatHistory(chatHistory);\r\n\r\n      const chat = model.startChat({\r\n        history: chatHistory,\r\n        generationConfig: {\r\n          maxOutputTokens: 100,\r\n        },\r\n      });\r\n\r\n      const msg = \"How many paws are in my house?\";\r\n\r\n      const result = await chat.sendMessage(msg);\r\n      const response = await result.response;\r\n      const text = await response.text();\r\n      console.log(text);\r\n      console.log(chatHistory);\r\n    };\r\n\r\n    run();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Scroll to bottom after a small delay when messages are loaded\r\n    const timer = setTimeout(() => {\r\n      if (messagesEndRef.current) {\r\n        messagesEndRef.current.scrollIntoView({\r\n          behavior: \"smooth\",\r\n          block: \"end\",\r\n        });\r\n      }\r\n    }, 100);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"messages\">\r\n      {chatHistory.length === 0 ? (\r\n        <div className=\"no-messages\">Start the conversation!</div>\r\n      ) : (\r\n        <div className=\"no-messages\">conversation!</div>\r\n\r\n        // messages.map((message, index) => (\r\n        //   <Message key={index} message={message} />\r\n        // ))\r\n      )}\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BotMessages;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}