{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayur\\\\OneDrive\\\\Desktop\\\\WEB PROJECT\\\\Major Project\\\\frontend\\\\src\\\\components\\\\BotMessages.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Message from \"./Message\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotMessages = () => {\n  _s();\n  const groupID = useSelector(state => state.groupID);\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    const run = async () => {\n      const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\n      const genAI = new GoogleGenerativeAI(API_KEY);\n\n      // For text-only input, use the gemini-pro model\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      let chatHistory = [{\n        role: \"user\",\n        parts: [{\n          text: \"Hello, I have 2 dogs in my house.\"\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: \"Great to meet you. What would you like to know?\"\n        }]\n      }];\n      const sendMessage = async msg => {\n        chatHistory.push({\n          role: \"user\",\n          parts: [{\n            text: msg\n          }]\n        });\n        const chat = model.startChat({\n          history: chatHistory,\n          generationConfig: {\n            maxOutputTokens: 100\n          }\n        });\n        const result = await chat.sendMessage(msg);\n        const response = await result.response;\n        const text = await response.text();\n\n        // Add a model response indicating the end of conversation (replace with appropriate method based on your library)\n        chatHistory.push({\n          role: \"model\",\n          parts: [{\n            text: text\n          }]\n        });\n        console.log(text);\n      };\n      await sendMessage(\"How many paws are in my house?\"); // Initial message\n    };\n    run();\n  }, []);\n  useEffect(() => {\n    // Scroll to bottom after a small delay when messages are loaded\n    const timer = setTimeout(() => {\n      if (messagesEndRef.current) {\n        messagesEndRef.current.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\"\n        });\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages\",\n    children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-messages\",\n      children: \"Start the conversation!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n      message: message\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(BotMessages, \"ZOYCCHUHoO9CDvc9D3UyyXz4Vkg=\", false, function () {\n  return [useSelector];\n});\n_c = BotMessages;\nexport default BotMessages;\nvar _c;\n$RefreshReg$(_c, \"BotMessages\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useSelector","Message","GoogleGenerativeAI","jsxDEV","_jsxDEV","BotMessages","_s","groupID","state","messages","setMessages","messagesEndRef","run","API_KEY","genAI","model","getGenerativeModel","chatHistory","role","parts","text","sendMessage","msg","push","chat","startChat","history","generationConfig","maxOutputTokens","result","response","console","log","timer","setTimeout","current","scrollIntoView","behavior","block","clearTimeout","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","_c","$RefreshReg$"],"sources":["C:/Users/mayur/OneDrive/Desktop/WEB PROJECT/Major Project/frontend/src/components/BotMessages.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Message from \"./Message\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nconst BotMessages = () => {\r\n  const groupID = useSelector((state) => state.groupID);\r\n  const [messages, setMessages] = useState([]);\r\n  const messagesEndRef = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const run = async () => {\r\n      const API_KEY = \"AIzaSyB0dmVIWZ5raZtTD230bCO2Da-j-PW2s8o\";\r\n      const genAI = new GoogleGenerativeAI(API_KEY);\r\n  \r\n      // For text-only input, use the gemini-pro model\r\n      const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n  \r\n      let chatHistory = [\r\n        { role: \"user\", parts: [{ text: \"Hello, I have 2 dogs in my house.\" }] },\r\n        { role: \"model\", parts: [{ text: \"Great to meet you. What would you like to know?\" }] },\r\n      ];\r\n  \r\n      const sendMessage = async (msg) => {\r\n        chatHistory.push({ role: \"user\", parts: [{ text: msg }] });\r\n        const chat = model.startChat({ history: chatHistory, generationConfig: { maxOutputTokens: 100 } });\r\n        const result = await chat.sendMessage(msg);\r\n        const response = await result.response;\r\n        const text = await response.text();\r\n\r\n        // Add a model response indicating the end of conversation (replace with appropriate method based on your library)\r\n        chatHistory.push({ role: \"model\", parts: [{ text: text }] });\r\n\r\n\r\n        console.log(text);\r\n      };\r\n  \r\n      await sendMessage(\"How many paws are in my house?\"); // Initial message\r\n    };\r\n  \r\n    run();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Scroll to bottom after a small delay when messages are loaded\r\n    const timer = setTimeout(() => {\r\n      if (messagesEndRef.current) {\r\n        messagesEndRef.current.scrollIntoView({\r\n          behavior: \"smooth\",\r\n          block: \"end\",\r\n        });\r\n      }\r\n    }, 100);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"messages\">\r\n      {messages.length === 0 ? (\r\n        <div className=\"no-messages\">Start the conversation!</div>\r\n      ) : (\r\n        messages.map((message, index) => (\r\n          <Message key={index} message={message} />\r\n        ))\r\n      )}\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BotMessages;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}