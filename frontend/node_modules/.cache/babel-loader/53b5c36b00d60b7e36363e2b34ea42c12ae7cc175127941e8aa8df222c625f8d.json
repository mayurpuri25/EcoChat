{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayur\\\\OneDrive\\\\Desktop\\\\WEB PROJECT\\\\Major Project\\\\frontend\\\\src\\\\components\\\\EcoBotChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport BotMessage from \"./BotMessage\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { Button } from \"primereact/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EcoBotChat = () => {\n  _s();\n  const [chatHistory, setChatHistory] = useState([]);\n  const [text, setText] = useState(\"\");\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    const run = async () => {\n      const API_KEY = \"YOUR_API_KEY\";\n      const genAI = new GoogleGenerativeAI(API_KEY);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n      });\n      const chat = model.startChat({\n        history: chatHistory,\n        generationConfig: {\n          maxOutputTokens: 100\n        }\n      });\n      const result = await chat.sendMessage(text);\n      const response = await result.response;\n      const modelResponse = await response.text();\n      setChatHistory([...chatHistory, {\n        role: \"user\",\n        parts: [{\n          text\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: modelResponse\n        }]\n      }]);\n      scrollToBottom();\n    };\n    if (text !== \"\") {\n      run();\n      setText(\"\"); // Clear input after sending message\n    }\n  }, [text, chatHistory]);\n  const handleSend = () => {\n    if (text.trim() !== \"\") {\n      setChatHistory([...chatHistory, {\n        role: \"user\",\n        parts: [{\n          text\n        }]\n      }]);\n      setText(\"\"); // Clear input after sending message\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: \"Start the conversation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this) : chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(BotMessage, {\n        message: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type something...\",\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSend,\n          label: \"Send\",\n          icon: \"pi pi-send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(EcoBotChat, \"xb3FW4IBj6u/KI4AHh826zr6SoU=\");\n_c = EcoBotChat;\nexport default EcoBotChat;\nvar _c;\n$RefreshReg$(_c, \"EcoBotChat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","BotMessage","GoogleGenerativeAI","Button","jsxDEV","_jsxDEV","EcoBotChat","_s","chatHistory","setChatHistory","text","setText","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","run","API_KEY","genAI","model","getGenerativeModel","chat","startChat","history","generationConfig","maxOutputTokens","result","sendMessage","response","modelResponse","role","parts","handleSend","trim","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","type","placeholder","value","onChange","e","target","onClick","label","icon","_c","$RefreshReg$"],"sources":["C:/Users/mayur/OneDrive/Desktop/WEB PROJECT/Major Project/frontend/src/components/EcoBotChat.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport BotMessage from \"./BotMessage\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nconst EcoBotChat = () => {\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [text, setText] = useState(\"\");\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const run = async () => {\r\n      const API_KEY = \"YOUR_API_KEY\";\r\n      const genAI = new GoogleGenerativeAI(API_KEY);\r\n      const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n      const chat = model.startChat({\r\n        history: chatHistory,\r\n        generationConfig: {\r\n          maxOutputTokens: 100,\r\n        },\r\n      });\r\n\r\n      const result = await chat.sendMessage(text);\r\n      const response = await result.response;\r\n      const modelResponse = await response.text();\r\n\r\n      setChatHistory([\r\n        ...chatHistory,\r\n        {\r\n          role: \"user\",\r\n          parts: [{ text }],\r\n        },\r\n        {\r\n          role: \"model\",\r\n          parts: [{ text: modelResponse }],\r\n        },\r\n      ]);\r\n\r\n      scrollToBottom();\r\n    };\r\n\r\n    if (text !== \"\") {\r\n      run();\r\n      setText(\"\"); // Clear input after sending message\r\n    }\r\n  }, [text, chatHistory]);\r\n\r\n  const handleSend = () => {\r\n    if (text.trim() !== \"\") {\r\n      setChatHistory([\r\n        ...chatHistory,\r\n        {\r\n          role: \"user\",\r\n          parts: [{ text }],\r\n        },\r\n      ]);\r\n      setText(\"\"); // Clear input after sending message\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"messages\">\r\n        {chatHistory.length === 0 ? (\r\n          <div className=\"no-messages\">Start the conversation!</div>\r\n        ) : (\r\n          chatHistory.map((message, index) => (\r\n            <BotMessage key={index} message={message} />\r\n          ))\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type something...\"\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n        />\r\n        <div className=\"send\">\r\n          <Button onClick={handleSend} label=\"Send\" icon=\"pi pi-send\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EcoBotChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}